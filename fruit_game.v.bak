module game(
    input CLOCK_50,
    input [0:0] KEY, // Reset
    output [6:0] HEX1, HEX0,
    output [9:5] LEDR, // Debug signals
    output [7:0] VGA_R,
    output [7:0] VGA_G,
    output [7:0] VGA_B,
    output VGA_HS,
    output VGA_VS,
    output VGA_BLANK_N,
    output VGA_SYNC_N,
    output VGA_CLK
);

    // Parameters
    parameter X_RES = 8'd159;
    parameter Y_RES = 7'd119;

    // FSM States
    parameter DRAW_BACKGROUND = 4'b1111;
    parameter DRAW_FRUIT_1 = 4'b1000;
    parameter DRAW_FRUIT_2 = 4'b0100;
    parameter DRAW_FRUIT_3 = 4'b0010;
    parameter UPDATE_POSITION_1 = 4'b1100;
    parameter UPDATE_POSITION_2 = 4'b0110;
    parameter UPDATE_POSITION_3 = 4'b0011;
	 parameter DRAW_PLAYER = 4'b1110;
	 parameter UPDATE_PLAYER = 4'b1101;

    // Signals
    reg [2:0] current_state, next_state;
    reg plot;                // Plot signal
    reg [7:0] bg_X;          // Background X coordinate
    reg [6:0] bg_Y;          // Background Y coordinate
    wire [2:0] bg_color;     // Background pixel color
//    wire timer_tick;         // Timer tick for state transitions
    reg [7:0] X_current, X_current_2, X_current_3; // Fruits' active X coordinates
    wire [7:0] X_rnd;        // Random X-coordinate
    reg [6:0] Y_current, Y_current_2, Y_current_3; // Fruits' active Y coordinates
    reg [2:0] XC, YC, XC_2, YC_2, XC_3, YC_3;      // Fruits' pixel coordinates
    wire [2:0] fruit_color, fruit_color_2, fruit_color_3; // Fruits' pixel colors
    wire [2:0] VGA_COLOR;    // VGA final color signal
    reg [19:0] fall_timer_1, fall_timer_2, fall_timer_3; // Fall sync timers
    wire fall_sync_1, fall_sync_2, fall_sync_3;    // Fall synchronization signals

    // Memory translator
    wire [14:0] addr;
    vga_address_translator addr_inst (bg_X, bg_Y, addr);
    defparam addr_inst.RESOLUTION = "160x120";

    // Instantiate the background ROM
    image_colour bg_ROM (addr, CLOCK_50, bg_color);

    // Instantiate fruit ROMs
    orange orange_ROM1 ({YC, XC}, CLOCK_50, fruit_color);
    orange2 orange_ROM2 ({YC_2, XC_2}, CLOCK_50, fruit_color_2);
    orange3 orange_ROM3 ({YC_3, XC_3}, CLOCK_50, fruit_color_3);
	 
	 // INstantiate Bucket ROM
	 wire [7:0] bucket_addr;
	 reg [7:0] X_player; // current bucket x
	 reg [6:0] Y_player; // current bucket y
	 reg [3:0] XP, YP;
	 wire [2:0] player_color; 
	 vga_address_translator bucket_inst (XP, YP, bucket_addr);
	 defparam bucket_inst.RESOLUTION = "160x120";
	 bucket player_ROM (bucket_addr, CLOCK_50, player_color);

    // Random X Generator
    rand_fruit_x RNG (
        .CLOCK_50(CLOCK_50),
        .KEY(KEY[0:0]),
        .rnd(X_rnd)
    );

    // HEX Display for Random X
    hex7seg H1 (X_rnd[7:4], HEX1);
    hex7seg H0 (X_rnd[3:0], HEX0);

	always @(posedge CLOCK_50 or negedge KEY[0]) begin
		 if (!KEY[0]) begin
			  // Reset all timers to 0 on reset
			  fall_timer_1 <= 20'd0;
			  fall_timer_2 <= 20'd0;
			  fall_timer_3 <= 20'd0;
		 end else begin
			  // Timer for fruit 1
			  if (fall_timer_1 == 20'd980_000) // Slightly slower
					fall_timer_1 <= 20'd0;
			  else
					fall_timer_1 <= fall_timer_1 + 1'b1;

			  // Timer for fruit 2
			  if (fall_timer_2 == 20'd950_000) // Faster
					fall_timer_2 <= 20'd0;
			  else
					fall_timer_2 <= fall_timer_2 + 1'b1;

			  // Timer for fruit 3
			  if (fall_timer_3 == 20'd1_040_000) // Moderate speed
					fall_timer_3 <= 20'd0;
			  else
					fall_timer_3 <= fall_timer_3 + 1'b1;
		 end
	end

	// Staggered fall sync signals
	assign fall_sync_1 = (fall_timer_1 == 20'd960_000); // Sync for fruit 1
	assign fall_sync_2 = (fall_timer_2 == 20'd900_000);  // Sync for fruit 2
	assign fall_sync_3 = (fall_timer_3 == 20'd1_035_000); // Sync for fruit 3


    // FSM Transitions
    always @(*) begin
        case (current_state)
            DRAW_BACKGROUND: begin
               plot = 1'b1;
               next_state = DRAW_FRUIT_1;
            end
            DRAW_FRUIT_1: begin
               plot = (fruit_color != 3'b111);
               next_state = DRAW_FRUIT_2;
            end
            DRAW_FRUIT_2: begin
               plot = (fruit_color_2 != 3'b111);
               next_state = DRAW_FRUIT_3;
            end
            DRAW_FRUIT_3: begin
               plot = (fruit_color_3 != 3'b111);
               next_state = DRAW_PLAYER;
            end
				DRAW_PLAYER: begin
               plot = 1'b1;
               next_state = UPDATE_POSITION_1;
            end
            UPDATE_POSITION_1: begin
               plot = 1'b0;
               next_state = UPDATE_POSITION_2;
            end
            UPDATE_POSITION_2: begin
               plot = 1'b0;
               next_state = UPDATE_POSITION_3;
            end
				
            UPDATE_POSITION_3: begin
               plot = 1'b0;
               next_state = UPDATE_PLAYER;
            end
				UPDATE_PLAYER: begin
					plot = 1'b0;
					next_state = DRAW_BACKGROUND;
				end
            default: begin
               plot = 1'b0;
               next_state = DRAW_BACKGROUND;
            end
        endcase
    end

    // FSM Current State
    always @(posedge CLOCK_50 or negedge KEY[0]) begin
        if (!KEY[0])
            current_state <= DRAW_BACKGROUND;
        else if (CLOCK_50)
            current_state <= next_state;
    end

    // Background Counters
    always @(posedge CLOCK_50 or negedge KEY[0]) begin
        if (!KEY[0]) begin
            bg_X <= 8'd0;
            bg_Y <= 7'd0;
        end else if (current_state == DRAW_BACKGROUND) begin
            if (bg_X == X_RES) begin
                bg_X <= 8'd0;
                if (bg_Y == Y_RES)
                    bg_Y <= 7'd0;
                else
                    bg_Y <= bg_Y + 1'b1;
            end else begin
                bg_X <= bg_X + 1'b1;
            end
        end
    end
	 
	 // Fruit Counters for DRAW_FRUIT States
	always @(posedge CLOCK_50 or negedge KEY[0]) begin
		 if (!KEY[0]) begin
			  // Reset all coordinates for all fruits
			  XC <= 3'b000;
			  YC <= 3'b000;
			  XC_2 <= 3'b000;
			  YC_2 <= 3'b000;
			  XC_3 <= 3'b000;
			  YC_3 <= 3'b000;
			  
			  XP <= 4'b0000;
			  YP <= 4'b0000;
		 end else begin
			  // Logic for DRAW_FRUIT_1
			  if (current_state == DRAW_FRUIT_1) begin
					if (XC == 3'b111) begin
						 XC <= 3'b000;
						 if (YC == 3'b111)
							  YC <= 3'b000; // Done drawing fruit 1
						 else
							  YC <= YC + 1'b1; // Increment row within fruit
					end else begin
						 XC <= XC + 1'b1; // Increment column within fruit
					end
			  end

			  // Logic for DRAW_FRUIT_2
			  if (current_state == DRAW_FRUIT_2) begin
					if (XC_2 == 3'b111) begin
						 XC_2 <= 3'b000;
						 if (YC_2 == 3'b111)
							  YC_2 <= 3'b000; // Done drawing fruit 2
						 else
							  YC_2 <= YC_2 + 1'b1; // Increment row within fruit
					end else begin
						 XC_2 <= XC_2 + 1'b1; // Increment column within fruit
					end
			  end

			  // Logic for DRAW_FRUIT_3
			  if (current_state == DRAW_FRUIT_3) begin
					if (XC_3 == 3'b111) begin
						 XC_3 <= 3'b000;
						 if (YC_3 == 3'b111)
							  YC_3 <= 3'b000; // Done drawing fruit 3
						 else
							  YC_3 <= YC_3 + 1'b1; // Increment row within fruit
					end else begin
						 XC_3 <= XC_3 + 1'b1; // Increment column within fruit
					end
			  end
			  
			  // Logic for DRAW_PLAYER
			 if (current_state == DRAW_PLAYER) begin
				if (XP == 4'b1111) begin
					 XP <= 4'b0000;
					 if (YP == 4'b1111)
						  YP <= 4'b0000; // Done drawing the bucket
					 else
						  YP <= YP + 1'b1; // Increment row
				end else begin
					 XP <= XP + 1'b1; // Increment column
				end
			end
		end
	end

	always @(posedge CLOCK_50 or negedge KEY[0]) begin
		 if (!KEY[0]) begin
			  // Initialize fruits at random non-zero positions
			  Y_current <= 7'b0; // Start at the top
			  X_current <= (X_rnd > 8'd10) ? X_rnd : (X_rnd + 8'd10); // Random non-zero X position for fruit 1

			  Y_current_2 <= 7'b0; // Start at the top
			  X_current_2 <= ((X_rnd + 8'd10) > 8'd10) ? (X_rnd + 8'd10) : (X_rnd + 8'd13); // Offset for fruit 2

			  Y_current_3 <= 7'b0; // Start at the top
			  X_current_3 <= ((X_rnd) > 8'd10) ? (X_rnd + 8'd1) : (X_rnd + 8'd12); // Offset for fruit 3
			  
			  Y_player <= 7'd80;
			  X_player <= 8'd72; 
		 end else begin
			  // Update fruit positions during their respective update states
			  if (current_state == UPDATE_POSITION_1 && fall_sync_1) begin
					if (Y_current >= Y_RES) begin
						 Y_current <= 7'b1; // Reset Y position
						 X_current <= (X_rnd > 8'd10) ? X_rnd : (X_rnd + 8'd10); // Re-randomize X position for fruit 1
					end else begin
						 Y_current <= Y_current + 1'b1; // Increment Y position
					end
			  end

			  if (current_state == UPDATE_POSITION_2 && fall_sync_2) begin
					if (Y_current_2 >= Y_RES) begin
						 Y_current_2 <= 7'd3; // Reset Y position
						 X_current_2 <= ((X_rnd + 8'd10) > 8'd10) ? (X_rnd + 8'd10) : (X_rnd + 8'd12); // Re-randomize X position for fruit 2
					end else begin
						 Y_current_2 <= Y_current_2 + 1'b1; // Increment Y position
					end
			  end

			  if (current_state == UPDATE_POSITION_3 && fall_sync_3) begin
					if (Y_current_3 >= Y_RES) begin
						 Y_current_3 <= 7'b0; // Reset Y position
						 X_current_3 <= ((X_rnd) > 8'd10) ? (X_rnd + 8'd2) : (X_rnd + 8'd13); // Re-randomize X position for fruit 3
					end else begin
						 Y_current_3 <= Y_current_3 + 1'b1; // Increment Y position
					end
			  end
			  
			  if (current_state == UPDATE_PLAYER) begin
					Y_player <= Y_player;
					X_player <= X_player + 1'b1;
			 end
		 end
	end

	 
	 assign LEDR[9:6] = current_state;
	 assign LEDR[5] = plot;

    // VGA Adapter
    vga_adapter VGA (
      .resetn(KEY[0]),
      .clock(CLOCK_50),
		.colour((current_state == DRAW_BACKGROUND) ? bg_color :
				  (current_state == DRAW_FRUIT_1) ? fruit_color :
				  (current_state == DRAW_FRUIT_2) ? fruit_color_2 :
				  (current_state == DRAW_FRUIT_3) ? fruit_color_3 :
				  (current_state == DRAW_PLAYER) ? player_color : bg_color), // Add player color
		.x((current_state == DRAW_BACKGROUND) ? bg_X :
			(current_state == DRAW_FRUIT_1) ? (X_current + XC) :
			(current_state == DRAW_FRUIT_2) ? (X_current_2 + XC_2) :
			(current_state == DRAW_FRUIT_3) ? (X_current_3 + XC_3) :
			(current_state == DRAW_PLAYER) ? (X_player + XP) : bg_X), // Add player x-coordinate
		.y((current_state == DRAW_BACKGROUND) ? bg_Y :
			(current_state == DRAW_FRUIT_1) ? (Y_current + YC) :
			(current_state == DRAW_FRUIT_2) ? (Y_current_2 + YC_2) :
			(current_state == DRAW_FRUIT_3) ? (Y_current_3 + YC_3) :
			(current_state == DRAW_PLAYER) ? (Y_player + YP) : bg_Y),  // Add player y-coordinate
	  .plot(plot),
	  .VGA_R(VGA_R),
	  .VGA_G(VGA_G),
	  .VGA_B(VGA_B),
	  .VGA_HS(VGA_HS),
	  .VGA_VS(VGA_VS),
	  .VGA_BLANK_N(VGA_BLANK_N),
	  .VGA_SYNC_N(VGA_SYNC_N),
	  .VGA_CLK(VGA_CLK)
   );

   defparam VGA.RESOLUTION = "160x120";
   defparam VGA.MONOCHROME = "FALSE";
   defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;

endmodule



module regn(R, Resetn, E, Clock, Q);
    parameter n = 8;
    input [n-1:0] R;
    input Resetn, E, Clock;
    output reg [n-1:0] Q;

    always @(posedge Clock)
        if (!Resetn)
            Q <= 0;
        else if (E)
            Q <= R;
endmodule

module countFruit(Clock, Resetn, E, Q);
    parameter n = 8;
    input Clock, Resetn, E;
    output reg [n-1:0] Q;

    always @ (posedge Clock)
        if (Resetn == 0)
            Q <= 0;
        else if (E)
                Q <= Q + 1;
endmodule

module hex7seg (hex, display);
    input [3:0] hex;
    output [6:0] display;

    reg [6:0] display;

    /*
     *       0  
     *      ---  
     *     |   |
     *    5|   |1
     *     | 6 |
     *      ---  
     *     |   |
     *    4|   |2
     *     |   |
     *      ---  
     *       3  
     */
    always @ (hex)
        case (hex)
            4'h0: display = 7'b1000000;
            4'h1: display = 7'b1111001;
            4'h2: display = 7'b0100100;
            4'h3: display = 7'b0110000;
            4'h4: display = 7'b0011001;
            4'h5: display = 7'b0010010;
            4'h6: display = 7'b0000010;
            4'h7: display = 7'b1111000;
            4'h8: display = 7'b0000000;
            4'h9: display = 7'b0011000;
            4'hA: display = 7'b0001000;
            4'hB: display = 7'b0000011;
            4'hC: display = 7'b1000110;
            4'hD: display = 7'b0100001;
            4'hE: display = 7'b0000110;
            4'hF: display = 7'b0001110;
        endcase
endmodule
